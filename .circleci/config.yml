# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      # - image: circleci/php:7.1-jessie-node-browsers
      - image: circleci/php:7.2-fpm-node-browsers
        environment:
          # Define these information to be used later in script
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: homestead
          DB_USERNAME: root
          DB_PASSWORD: enFn8dsmQBi4gkcP
      # - image: shincoder/homestead:php7.2
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      - image: mysql:5.7
        environment:
          MYSQL_ROOT_HOST: '%'
          MYSQL_ROOT_PASSWORD: enFn8dsmQBi4gkcP

      # - image: redis:2.8.19
      # OPENCC image
      # - image: samwutw/opencci:1.0.11

    working_directory: ~/PlurkAnalytics
    steps:
      - checkout

      # - run: |
      #     curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      #     echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      - run: |
          sudo apt-get update
          # sudo apt-get install -y yarn
          # sudo apt-get install -y zlib1g-dev libsqlite3-dev libicu-dev g++
          # sudo apt-get install -y mysql-server
          # sudo apt-get install -y mysql-client

      - run: sudo docker-php-ext-configure intl
      - run: sudo docker-php-ext-install intl
      - run: sudo docker-php-ext-install zip pdo_mysql
      #
      - run: sudo service --status-all

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: Install MySQL client
          command: |
            sudo apt install mysql-client

      # - run:
      #     name: Install Demo Database
      #     command: |
      #       mysql -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE < <PATH TO YOUR DATABASE FILE>
      #       #Example: /home/circleci/<YOUR REPOSITORY>/<YOUR DATABASE FILE>

      - run:
          name: Mysql database
          command: |
            mysql -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "create database homestead;"
            mysql -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "CREATE USER 'homestead'@'localhost' IDENTIFIED BY 'secret';";
            mysql -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "GRANT ALL PRIVILEGES ON homestead.* TO 'homestead'@'localhost';";
            mysql -h$DB_HOST -u$DB_USERNAME -p$DB_PASSWORD -e "FLUSH PRIVILEGES;";

      - run:
          name: Start database server
          command: |
            # sudo service mysql start
            # sleep 2
            ps aux | grep mysql

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache

      - restore_cache:
          keys:
            - node-v3-{{ checksum "package.json" }}
            - node-v3-
      - run: yarn install
      - save_cache:
          key: node-v3-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database

      - run: chmod -R 777 storage
      - run: cp .env.example .env
      - run: php artisan key:generate
      - run: php artisan migrate

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit tests/
      # - run: ./vendor/bin/codecept build
      # - run: ./vendor/bin/codecept run --xml result.xml
      # - store_test_results:
      #     path: tests/_output
      # - store_artifacts:
      #     path: tests/_output
